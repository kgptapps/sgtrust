name: 🚀 Build and Deploy Professor S. Govindasamy Website
# Repository: git@github.com:kgptapps/sgtrust.git
# AWS S3 Deployment URL: https://profsg.org

on:
  push:
    branches: [ main ]
    paths:
      - 'website/**'
      - '.github/workflows/**'
      - 'index.html'
  pull_request:
    branches: [ main ]
    paths:
      - 'website/**'
      - '.github/workflows/**'
      - 'index.html'
  workflow_dispatch: # Allow manual triggering

# Sets permissions of the GITHUB_TOKEN
permissions:
  contents: read
  actions: write
  checks: write
  pull-requests: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "aws-deploy"
  cancel-in-progress: false

env:
  NODE_VERSION: '20'
  CACHE_VERSION: 'v1'
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}

jobs:
  # Quality checks and build job
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      build-success: ${{ steps.build-check.outputs.success }}
      test-results: ${{ steps.test-summary.outputs.results }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better caching

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: website/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd website
          echo "🔍 Checking package-lock.json integrity..."
          npm ci --prefer-offline --no-audit
          echo "✅ Dependencies installed successfully"

      - name: 🔍 Verify installation
        run: |
          cd website
          echo "📋 Installed packages:"
          npm list --depth=0 || true
          echo "🔧 Node version: $(node --version)"
          echo "📦 NPM version: $(npm --version)"

      - name: 🧪 Run tests (non-blocking)
        run: |
          cd website
          echo "Running tests..."
          npm test -- --run || echo "⚠️ Tests failed but continuing build"

      - name: 🌐 Run translation coverage tests (non-blocking)
        run: |
          cd website
          echo "Checking translation coverage..."
          npm run test:translations -- --run || echo "⚠️ Translation tests failed but continuing build"

      - name: 🔍 Run linting (non-blocking)
        run: |
          cd website
          echo "Running ESLint..."
          npm run lint || echo "⚠️ Linting failed but continuing build"

      - name: 🏗️ Build website (CRITICAL)
        run: |
          cd website
          echo "Building website..."
          npm run build
          echo "✅ Build completed successfully"

      - name: 🔍 Verify build output
        run: |
          cd website
          if [ ! -f "dist/index.html" ]; then
            echo "❌ Missing dist/index.html"
            exit 1
          fi
          if [ ! -d "dist/assets" ]; then
            echo "❌ Missing dist/assets directory"
            exit 1
          fi
          echo "✅ Build output verified"
          echo "📊 Build size: $(du -sh dist | cut -f1)"

      - name: ☁️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🚀 Deploy to S3
        run: |
          cd website
          echo "🚀 Deploying to S3 bucket: ${{ env.S3_BUCKET }}"
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }}/website --delete --exact-timestamps

          echo "📄 Setting content types for common file extensions..."
          # Set correct content types for common files
          aws s3 cp s3://${{ env.S3_BUCKET }}/website s3://${{ env.S3_BUCKET }}/website \
            --recursive \
            --exclude "*" \
            --include "*.html" \
            --content-type "text/html" \
            --metadata-directive REPLACE

          aws s3 cp s3://${{ env.S3_BUCKET }}/website s3://${{ env.S3_BUCKET }}/website \
            --recursive \
            --exclude "*" \
            --include "*.css" \
            --content-type "text/css" \
            --metadata-directive REPLACE

          aws s3 cp s3://${{ env.S3_BUCKET }}/website s3://${{ env.S3_BUCKET }}/website \
            --recursive \
            --exclude "*" \
            --include "*.js" \
            --content-type "application/javascript" \
            --metadata-directive REPLACE

          aws s3 cp s3://${{ env.S3_BUCKET }}/website s3://${{ env.S3_BUCKET }}/website \
            --recursive \
            --exclude "*" \
            --include "*.json" \
            --content-type "application/json" \
            --metadata-directive REPLACE

      - name: 🔄 Invalidate CloudFront cache
        if: env.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          echo "🔄 Invalidating CloudFront distribution: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)

          echo "⏳ Waiting for invalidation $INVALIDATION_ID to complete..."
          aws cloudfront wait invalidation-completed \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --id $INVALIDATION_ID

          echo "✅ CloudFront cache invalidation completed"

      - name: 🏥 Health check
        run: |
          echo "🏥 Performing health check..."
          # Wait a moment for deployment to propagate
          sleep 30

          # Check if the site is accessible
          if [ -n "${{ secrets.DOMAIN_NAME }}" ]; then
            HEALTH_URL="https://${{ secrets.DOMAIN_NAME }}"
            echo "🔍 Checking: $HEALTH_URL"

            # Try to access the site
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL" || echo "000")

            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✅ Health check passed - Site is accessible"
            else
              echo "⚠️ Health check warning - HTTP status: $HTTP_STATUS"
              echo "This might be normal if DNS hasn't propagated yet"
            fi
          else
            echo "ℹ️ No DOMAIN_NAME secret configured, skipping health check"
          fi

      - name: 📊 Deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: ${{ env.S3_BUCKET }}/website" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **CloudFront Distribution**: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

          if [ -n "${{ secrets.DOMAIN_NAME }}" ]; then
            echo "- **Website URL**: https://${{ secrets.DOMAIN_NAME }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Deployment completed successfully!**" >> $GITHUB_STEP_SUMMARY
