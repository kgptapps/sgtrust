#!/bin/bash

# Pre-push hook to ensure build quality
# This script runs before every git push to prevent broken builds

set -e  # Exit on any error

echo "🔍 Pre-push quality checks starting..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if we're in the right directory
if [ ! -d "website" ]; then
    print_error "website directory not found. Run this from the project root."
    exit 1
fi

cd website

print_status "Checking Node.js and npm versions..."
node --version
npm --version

# Install dependencies if node_modules is missing or package-lock.json is newer
if [ ! -d "node_modules" ] || [ "package-lock.json" -nt "node_modules" ]; then
    print_status "Installing/updating dependencies..."
    npm ci --prefer-offline --no-audit
    print_success "Dependencies installed"
else
    print_success "Dependencies up to date"
fi

# TypeScript compilation check
print_status "Running TypeScript compilation check..."
if npm run build > /dev/null 2>&1; then
    print_success "TypeScript compilation passed"
else
    print_error "TypeScript compilation failed!"
    echo "Running build to show errors:"
    npm run build
    exit 1
fi

# Linting check (BLOCKING - must pass)
print_status "Running ESLint..."
if npm run lint; then
    print_success "Linting passed"
else
    print_error "Linting failed! Fix all ESLint errors before pushing."
    echo ""
    echo "💡 To fix linting issues:"
    echo "   cd website && npm run lint"
    echo ""
    exit 1
fi

# Test execution (BLOCKING - must pass)
print_status "Running tests..."
if npm test -- --run; then
    print_success "All tests passed"
else
    print_error "Tests failed! Fix all failing tests before pushing."
    echo ""
    echo "💡 To fix test issues:"
    echo "   cd website && npm test"
    echo ""
    exit 1
fi

# Translation coverage check (BLOCKING - must pass)
print_status "Checking translation coverage..."
if npm run test:translations -- --run; then
    print_success "Translation coverage passed"
else
    print_error "Translation coverage failed! Fix all hardcoded English text before pushing."
    echo ""
    echo "💡 To fix translation issues:"
    echo "   cd website && npm run test:translations"
    echo "   Replace hardcoded English text with translation keys"
    echo ""
    exit 1
fi

# Build size check
print_status "Checking build output..."
if [ -d "dist" ]; then
    BUILD_SIZE=$(du -sh dist | cut -f1)
    print_success "Build size: $BUILD_SIZE"
    
    # Check for critical files
    if [ ! -f "dist/index.html" ]; then
        print_error "Missing dist/index.html"
        exit 1
    fi
    
    if [ ! -d "dist/assets" ]; then
        print_error "Missing dist/assets directory"
        exit 1
    fi
    
    print_success "Build output structure verified"
else
    print_error "No dist directory found after build"
    exit 1
fi

# Check for common issues
print_status "Checking for common issues..."

# Check for console.log statements (warning only)
if grep -r "console\.log" src/ > /dev/null 2>&1; then
    print_warning "console.log statements found in source code"
    grep -r "console\.log" src/ | head -5
fi

# Check for TODO/FIXME comments
TODO_COUNT=$(grep -r "TODO\|FIXME" src/ | wc -l || echo "0")
if [ "$TODO_COUNT" -gt 0 ]; then
    print_warning "$TODO_COUNT TODO/FIXME comments found"
fi

cd ..

print_success "🎉 ALL QUALITY CHECKS PASSED! Zero errors allowed."
echo ""
echo "📋 Strict Quality Verification Complete:"
echo "   ✅ TypeScript compilation: PASSED (zero errors)"
echo "   ✅ Build generation: PASSED"
echo "   ✅ File structure: VERIFIED"
echo "   ✅ ESLint: PASSED (zero errors)"
echo "   ✅ Tests: PASSED (all tests passing)"
echo "   ✅ Translation coverage: PASSED (no hardcoded English)"
echo ""
echo "🚀 Code quality verified - Ready for deployment!"
echo ""
